// Generated by CoffeeScript 1.6.3
(function() {
  var namespace;

  if (typeof window !== 'undefined') {
    namespace = window.retool = {};
  } else {
    namespace = module.exports;
  }

  $.fn.item = function(model) {
    var id, node, slug, _ref;
    node = $(this).get(0);
    if ('string' === typeof model) {
      model = {
        slug: model
      };
    }
    if (model) {
      slug = model.slug || ((_ref = model.name) != null ? _ref.toLowerCase() : void 0);
    } else {
      slug = 'item';
    }
    while (node && node.tagName !== 'HTML') {
      id = node.getAttribute('data-' + slug + '-id');
      if (id != null) {
        if (model && model.get && model.id_attr) {
          return model.get(id);
        } else {
          return id;
        }
      }
      node = node.parentNode;
    }
    return null;
  };

  $.fn.emptyAll = function() {
    $(this).children().remove();
    return $(this).text('');
  };

  $.fn.hasVerticalScrollBar = function() {
    return this[0].clientHeight < this[0].scrollHeight;
  };

  namespace.zpad = function(s, n) {
    if (s == null) {
      s = '';
    }
    if (n == null) {
      n = 0;
    }
    s += '';
    while (s.length < n) {
      s = '0' + s;
    }
    return s;
  };

  namespace.Class = (function() {
    function Class(o) {
      var k, v;
      for (k in o) {
        v = o[k];
        this[k] = v;
      }
    }

    return Class;

  })();

  /*
  # Python style imports for javascript / coffeescript. Import module contents into your scope.
  # This is like python's "from APP.MODULE import *" pattern.
  
  APP = require 'APP' # If using Node or other commonjs imports.
  
  eval MODULE 'APP.MY_MODULE' # The "magic"
  
  # Then you can do:
  amazing = new Amazing()
  
  class APP.MY_MODULE.Amazing =
    shine: ->
  
  amazing = new APP.MODULE.Amazing()
  
  # You can also define modules like this:
  
  MODULE 'APP.MY_MODULE', ->
    class @Amazing
      shine ->
  
  
  # response: Wow! You did the same thing with more code...
  # Yes, it's probably better to just use explicit references to modules.
  */


  window.MODULE = function(names, fn) {
    var items, k, space, v, _name, _ref;
    if (fn) {
      if (typeof names === 'string') {
        names = names.split('.');
      }
      space = this[_name = names.shift()] || (this[_name] = {});
      space.MODULE || (space.MODULE = this.MODULE);
      if (names.length) {
        return space.MODULE(names, fn);
      } else {
        return fn.call(space);
      }
    } else {
      items = [];
      _ref = eval(names);
      for (k in _ref) {
        v = _ref[k];
        if (k !== 'MODULE') {
          items.push(k + '=' + names + '.' + k);
        }
      }
      return 'var ' + items.join(',') + ';';
    }
  };

}).call(this);
