// Generated by CoffeeScript 1.6.3
(function() {
  var namespace, zpad, _ref, _ref1, _ref2, _ref3, _ref4,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (typeof window !== 'undefined') {
    namespace = window.reform = {};
  } else {
    namespace = module.exports;
  }

  zpad = retool.zpad;

  namespace.fields = {};

  namespace.fields.text = (function(_super) {
    __extends(text, _super);

    function text() {
      text.__super__.constructor.apply(this, arguments);
      if (!this.name) {
        console.warn('unnamed field!', this);
      }
    }

    text.prototype.input_type = 'text';

    text.prototype.test = function(value) {
      var valid;
      valid = true;
      if (this.required && !value) {
        valid = false;
      }
      return valid;
    };

    text.prototype.validate = function() {
      var valid, value;
      value = this.value();
      valid = this.test(value);
      if (valid) {
        this.$state_el().removeClass('error');
      } else {
        this.$state_el().addClass('error');
      }
      return valid;
    };

    text.prototype.child = function(name, spec) {
      if (spec == null) {
        spec = {};
      }
      spec.name = this.name + "__" + name;
      return this.form.field_from_spec(spec, false);
    };

    text.prototype.$state_el = function() {
      return this.$el().parents('fieldset');
    };

    text.prototype.$el = function() {
      return this.form.$('[name="' + this.name + '"]');
    };

    text.prototype.value = function(value) {
      if (value) {
        return this.$el().val(value);
      } else {
        return this.$el().val();
      }
    };

    text.prototype._attr_string = function(extra_attrs) {
      var attrs, h, k, v;
      if (extra_attrs == null) {
        extra_attrs = {};
      }
      h = '';
      attrs = $.extend({}, this.attrs, {
        name: this.name
      }, extra_attrs);
      for (k in attrs) {
        v = attrs[k];
        h += ' ' + k + '="' + v + '"';
      }
      return h;
    };

    text.prototype.get_label = function() {
      if ('function' === typeof this.label) {
        return this.label();
      } else {
        return this.label;
      }
    };

    text.prototype.render = function(value) {
      var h;
      h = '<input';
      h += this._attr_string({
        value: value,
        type: this.input_type
      });
      return h + '>';
    };

    return text;

  })(retool.Class);

  namespace.fields.degrees_minutes_seconds = (function(_super) {
    __extends(degrees_minutes_seconds, _super);

    function degrees_minutes_seconds() {
      degrees_minutes_seconds.__super__.constructor.apply(this, arguments);
      this.degrees = this.child("degrees", {
        attrs: {
          size: 4
        }
      });
      this.minutes = this.child("minutes", {
        attrs: {
          size: 4
        }
      });
      this.seconds = this.child("seconds", {
        attrs: {
          size: 4
        }
      });
    }

    degrees_minutes_seconds.prototype.value = function() {
      return this.degrees.value() + this.minutes.value / 60 + this.seconds.value / 3600;
    };

    degrees_minutes_seconds.prototype.render = function(value) {
      var degrees, minutes, seconds;
      degrees = Math.floor(value);
      minutes = Math.floor((value - degrees) * 60);
      seconds = Math.floor((value - degrees - minutes * 60) * 3600);
      this.degrees.render(degrees) + zpad(this.minutes.render(minutes), 2) + '&deg; ';
      return zpad(this.seconds.render(seconds), 2) + '';
    };

    return degrees_minutes_seconds;

  })(namespace.fields.text);

  namespace.fields.datetime_split = (function(_super) {
    __extends(datetime_split, _super);

    function datetime_split() {
      datetime_split.__super__.constructor.apply(this, arguments);
      this.date = this.child('date', {
        attrs: {
          size: 9
        }
      });
      this.time = this.child('time', {
        attrs: {
          size: 4
        }
      });
    }

    datetime_split.prototype.value = function() {
      return new Date(this.date.value() + ' ' + this.time.value()).valueOf();
    };

    datetime_split.prototype.render = function(value) {
      var date, dt, time;
      dt = new Date(value);
      date = zpad(dt.getFullYear(), 4) + '-' + zpad(dt.getMonth() + 1, 2) + '-' + zpad(dt.getDate(), 2);
      time = zpad(dt.getHours(), 2) + ":" + zpad(dt.getMinutes(), 2);
      return this.date.render(date) + this.time.render(time);
    };

    datetime_split.prototype.ready = function() {
      return this.$.pickadate();
    };

    return datetime_split;

  })(namespace.fields.text);

  namespace.fields.select = (function(_super) {
    __extends(select, _super);

    function select() {
      _ref = select.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    select.prototype.render = function(value) {
      var h, option, selected_flag, _i, _len, _ref1, _ref2;
      h = '<select';
      h += this._attr_string();
      h += '>';
      _ref1 = this.get_options();
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        option = _ref1[_i];
        selected_flag = option.value === value ? ' selected=selected' : '';
        h += '<option value="' + option.value + '"' + selected_flag + '>' + ((_ref2 = option.text) != null ? _ref2 : option.value) + '</option>';
      }
      h += '</select>';
      return h;
    };

    select.prototype.get_options = function() {
      return this.options != null ? this.options : this.options = APP.MODELS[this.model].menu_options_sync();
    };

    return select;

  })(namespace.fields.text);

  namespace.fields.hidden = (function(_super) {
    __extends(hidden, _super);

    function hidden() {
      _ref1 = hidden.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    hidden.prototype.hidden = true;

    hidden.prototype.input_type = 'hidden';

    return hidden;

  })(namespace.fields.text);

  namespace.fields.typeahead = (function(_super) {
    __extends(typeahead, _super);

    typeahead.prototype.hidden = false;

    function typeahead() {
      var _ref2;
      typeahead.__super__.constructor.apply(this, arguments);
      this.display = this.child("display", {
        attrs: {
          'class': 'typeahead-display',
          size: (_ref2 = this.attrs) != null ? _ref2.size : void 0
        }
      });
    }

    typeahead.prototype.render = function(value) {
      var h, option, selected, val, _i, _len, _ref2, _ref3;
      selected = _.findWhere(this.get_options(), {
        value: value
      });
      h = typeahead.__super__.render.apply(this, arguments);
      h += this.display.render(selected != null ? selected.text : void 0);
      h += "<ul class='typeahead-menu' style='display:none'>";
      _ref2 = this.get_options();
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        option = _ref2[_i];
        val = (_ref3 = option.text) != null ? _ref3 : option.value;
        h += "<li class='option' data-value='" + option.value + "'>" + val + "</li>";
      }
      h += "<li class='error' style='display:none'>(no matches)</li>";
      h += "</ul>";
      return h;
    };

    typeahead.prototype.get_options = function() {
      return this.options != null ? this.options : this.options = remodel.menu_options_sync(APP.MODELS[this.model].all());
    };

    return typeahead;

  })(namespace.fields.hidden);

  review.view('.typeahead', {
    get_display: function() {
      return this.$.find('.typeahead-display');
    },
    get_menu: function() {
      return this.$.find('.typeahead-menu');
    },
    get_hidden: function() {
      return this.$.find('input[type="hidden"]');
    },
    after: function(fn) {
      var that;
      that = this;
      return setTimeout(function() {
        return fn.apply(that);
      }, 1);
    },
    events: {
      'click': function() {
        if (!this.get_display().is(":focus")) {
          return this.get_display().focus();
        }
      },
      'focus input': function(e) {
        var $display, offs;
        $display = this.get_display();
        offs = $display.offset();
        this.get_menu().show().css({
          top: offs.top - $(window).scrollTop() + $display.outerHeight() + 'px',
          left: offs.left + 'px',
          'max-width': '300px'
        });
        this.get_menu().children('.option').show();
        this.after(function() {
          return this.get_display().get(0).select();
        });
        return this.update_display_message();
      },
      'blur input': function(e) {
        var $current_match, $display, $menu, that;
        $menu = this.get_menu();
        $display = this.get_display();
        this.update_typeahead_display();
        $current_match = $menu.find('li.option:visible:first');
        that = this;
        return setTimeout(function() {
          $menu.hide();
          if (!$current_match.length) {
            $menu.find("li:not([data-value])");
          }
          if ($display.val() !== $current_match.text()) {
            return that.select_menu_item($current_match);
          }
        }, 1);
      },
      'keyup input': 'update_typeahead_display',
      'mousedown .typeahead-menu': function(e) {
        return this.select_menu_item(e.target);
      }
    },
    update_typeahead_display: function() {
      var $c, $s, $t, v;
      $t = this.get_display();
      $c = $t.next().children('.option').hide();
      v = ($t.val() || '').toLowerCase();
      $s = $c.filter(function() {
        var pos, t;
        t = this.innerText;
        pos = t.toLowerCase().indexOf(v);
        if (pos > -1) {
          $(this).html(t.substr(0, pos) + "<b>" + t.substr(pos, v.length) + "</b>" + t.substr(pos + v.length));
        }
        return pos !== -1;
      }).show();
      if ($s.length === 0) {
        this.get_menu().find('.error').show();
      } else {
        this.get_menu().find('.error').hide();
      }
      return this.update_display_message();
    },
    update_display_message: function() {
      if (this.get_menu().hasVerticalScrollBar()) {
        return this.get_menu().attr('data-message', 'scroll for more');
      } else {
        return this.get_menu().attr('data-message', '');
      }
    },
    select_menu_item: function(el) {
      this.get_display().val($(el).text());
      return this.get_hidden().val($(el).attr('data-value')).change();
    }
  });

  namespace.fields.textarea = (function(_super) {
    __extends(textarea, _super);

    function textarea() {
      _ref2 = textarea.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    textarea.prototype.render = function(value) {
      var h;
      h = '<textarea';
      h += this._attr_string();
      return h + '>' + (value || '') + '</textarea>';
    };

    return textarea;

  })(namespace.fields.text);

  namespace.fields.number = (function(_super) {
    __extends(number, _super);

    function number() {
      _ref3 = number.__super__.constructor.apply(this, arguments);
      return _ref3;
    }

    number.prototype.input_type = 'number';

    number.prototype.value = function(value) {
      var val;
      val = number.__super__.value.apply(this, arguments);
      if (val) {
        return parseInt(val);
      }
    };

    return number;

  })(namespace.fields.text);

  namespace.form = function(root, opts) {
    var field, form, _i, _len, _ref4;
    if (opts == null) {
      opts = {};
    }
    opts.root = root;
    form = new namespace.form.Form(opts);
    form.fields = [];
    _ref4 = opts.fields;
    for (_i = 0, _len = _ref4.length; _i < _len; _i++) {
      field = _ref4[_i];
      form.field_from_spec(field);
    }
    form.view = review.view(root, {
      events: {
        'change *[name]': 'change'
      },
      change: function(e) {
        return this.form.change(e);
      },
      form: form
    });
    return form;
  };

  namespace.model_form = function(root, opts) {
    var id_fields;
    if (opts == null) {
      opts = {};
    }
    id_fields = _.where(opts.fields, {
      name: opts.model.id_attr
    });
    if (!id_fields.length) {
      opts.fields.unshift({
        name: opts.model.id_attr,
        type: 'hidden'
      });
    }
    return namespace.form(root, opts);
  };

  namespace.form.Form = (function(_super) {
    __extends(Form, _super);

    function Form() {
      _ref4 = Form.__super__.constructor.apply(this, arguments);
      return _ref4;
    }

    Form.prototype.field_from_spec = function(spec, is_root) {
      var field, fieldClass;
      if (is_root == null) {
        is_root = true;
      }
      fieldClass = namespace.fields[spec.type || 'text'];
      spec.form = this;
      field = new fieldClass(spec);
      if (is_root) {
        this.fields.push(field);
      }
      return field;
    };

    Form.prototype.is_bound = function() {
      return !!this.root;
    };

    Form.prototype.$ = function(subSelector) {
      var $el;
      $el = $(this.root).filter(":visible");
      if (subSelector) {
        return $el.find(subSelector);
      }
      return $el;
    };

    Form.prototype.get_field = function(fieldname) {
      var field;
      field = _.findWhere(this.fields, {
        name: fieldname
      });
      return field;
    };

    Form.prototype.render_field = function(field, value) {
      var h;
      if (field.hidden) {
        return field.render(value);
      }
      h = '<fieldset class="';
      if (!field.test(value)) {
        h += "error ";
      }
      h += field.constructor.name + '">';
      if (field.label) {
        h += '<legend>' + field.get_label() + '</legend>';
      }
      h += field.render(value);
      return h + '</fieldset>';
    };

    Form.prototype.render = function(data) {
      var field, h, _i, _len, _ref5;
      if (!data) {
        throw "No data";
      }
      h = '';
      _ref5 = this.fields;
      for (_i = 0, _len = _ref5.length; _i < _len; _i++) {
        field = _ref5[_i];
        h += this.render_field(field, data[field.name]);
      }
      return h;
    };

    Form.prototype.generate = function(data) {
      var $h;
      $h = $(this.render(data));
      $h.find('input').filter(function() {
        return $(this).attr('name').indexOf("__date") !== -1;
      }).pickadate({
        formatSubmit: 'yyyy-mm-dd',
        format: 'yyyy-mm-dd'
      });
      return $h;
    };

    Form.prototype.get_data = function() {
      var data, field, _i, _len, _ref5;
      data = {};
      _ref5 = this.fields;
      for (_i = 0, _len = _ref5.length; _i < _len; _i++) {
        field = _ref5[_i];
        data[field.name] = field.value();
      }
      return data;
    };

    Form.prototype.validate = function() {
      var field, valid, _i, _len, _ref5;
      valid = true;
      _ref5 = this.fields;
      for (_i = 0, _len = _ref5.length; _i < _len; _i++) {
        field = _ref5[_i];
        valid = valid && field.validate();
      }
      return valid;
    };

    Form.prototype._get_truncated_name = function(el) {
      var end, name;
      name = $(el).attr('name');
      end = name.indexOf('__');
      if (end === -1) {
        return name;
      } else {
        return name.substr(0, end);
      }
    };

    Form.prototype.change = function(e) {
      var field, fieldname, instance;
      fieldname = this._get_truncated_name(e.target);
      field = this.get_field(fieldname);
      field.validate();
      if (this.model != null) {
        instance = new this.model(this.get_data());
        return instance.save();
      }
    };

    Form.prototype.save = function() {
      return this.model.save(this.get_data());
    };

    return Form;

  })(retool.Class);

}).call(this);
