// Generated by CoffeeScript 1.6.3
(function() {
  var ajax_reporter, method, namespace, resolve_model, underscore_array_methods, underscore_collection_methods, _fn, _i, _len, _ref, _ref1, _ref2, _ref3,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (typeof window !== 'undefined') {
    namespace = window.remodel = {};
  } else {
    namespace = module.exports;
  }

  if (typeof _remodel_warmup !== 'undefined') {
    namespace.warmup = _remodel_warmup;
  } else {
    namespace.warmup = {};
  }

  namespace.menu_options_sync = function(items) {
    var e, item, recent, that, _i, _len;
    this.menu_options = [
      {
        value: '',
        text: '...'
      }
    ];
    for (_i = 0, _len = items.length; _i < _len; _i++) {
      item = items[_i];
      this.menu_options.push({
        value: item.get_id(),
        text: item.describe()
      });
    }
    that = items[0].constructor;
    try {
      recent = JSON.parse(localStorage['recent_' + that.slug]);
    } catch (_error) {
      e = _error;
      recent = {};
    }
    this.menu_options = this.menu_options.sort(function(a, b) {
      var score, _name, _name1;
      score = 0;
      if (a.text > b.text) {
        score += 1;
      } else if (a.text < b.text) {
        score -= 1;
      }
      if (recent == null) {
        recent = {};
      }
      if (recent[_name = a.text] == null) {
        recent[_name] = 0;
      }
      if (recent[_name1 = b.text] == null) {
        recent[_name1] = 0;
      }
      score += recent[a.text] - recent[b.text];
      return score;
    });
    localStorage['recent_' + that.slug] = JSON.stringify(recent);
    return this.menu_options;
  };

  namespace.load = function(models, cb) {
    var i;
    i = 0;
    return async.map(Object.keys(models), function(key, done) {
      var m;
      m = models[key];
      if (m.load) {
        m.slug = m.name.toLowerCase();
        return m.load(function() {
          i += 1;
          return done();
        });
      } else {
        return done();
      }
    }, function() {
      return cb();
    });
  };

  resolve_model = function(model_path) {
    var model;
    if (typeof model_path === 'string') {
      model = APP.MODELS[model_path];
    } else {
      model = model_path;
    }
    if (!model) {
      throw 'No model "' + model_path + '" could be resolved.';
    }
    return model;
  };

  namespace.Model = (function(_super) {
    __extends(Model, _super);

    function Model() {
      _ref = Model.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Model.prototype.rlookup = function(model, slug) {
      var query;
      model = resolve_model(model);
      query = {};
      query[slug] = this.get_id();
      return model.findWhere(query);
    };

    Model.prototype.lookup = function(slug) {
      var model, model_path;
      model_path = this.constructor.fkeys[slug];
      if (!model_path) {
        throw 'Foreign key "' + slug + '" does not exist.';
      }
      model = resolve_model(model_path);
      return model.get(this[slug]);
    };

    Model.prototype.lookup_desc = function(slug, def) {
      var item;
      if (def == null) {
        def = '';
      }
      item = this.lookup(slug);
      if (item) {
        return item[item.constructor.desc_attr];
      } else {
        return def;
      }
    };

    Model.prototype.save = function() {
      return this.constructor.save(this);
    };

    Model.prototype.del = function() {
      return this.constructor.del(this.get_id());
    };

    Model.desc_attr = 'name';

    Model.id_attr = '_id';

    Model.prototype.get_id = function() {
      return this[this.constructor.id_attr];
    };

    Model.prototype.set_id = function(id) {
      return this[this.constructor.id_attr] = id;
    };

    Model.prototype.describe = function() {
      var _ref1;
      return (_ref1 = this[this.constructor.desc_attr]) != null ? _ref1 : '';
    };

    Model.add = function(obj, overwrite) {
      var id, orig;
      if (overwrite == null) {
        overwrite = false;
      }
      this.hydrate(obj);
      orig = void 0;
      id = obj.get_id();
      if (id) {
        orig = this.get(id);
      }
      if (orig) {
        if (overwrite) {
          this.items = this.filter(function(o) {
            return o.get_id() !== id;
          });
          this.items.push(obj);
        } else {
          obj = $.extend(orig, obj);
        }
      } else {
        obj.set_id('' + new Date().valueOf());
        this.items.push(obj);
      }
      return obj;
    };

    Model.save = function(obj, overwrite) {
      if (overwrite == null) {
        overwrite = false;
      }
      obj = this.add(obj, overwrite);
      return obj;
    };

    Model.del = function(id) {
      if (typeof id === 'object') {
        id = this.hydrate(id).get_id();
      }
      this.items = this.filter(function(o) {
        return o.get_id() !== id;
      });
      return id;
    };

    Model.get = function(id) {
      var query;
      query = {};
      query[this.id_attr || "_id"] = id;
      return this.findWhere(query);
    };

    Model.hydrate = function(item) {
      return item.__proto__ = this.prototype;
    };

    Model.prototype.dehydrate = function() {
      return delete item.__proto__;
    };

    Model.load = function(items) {
      var item, _i, _len, _ref1, _results;
      this.items = items;
      _ref1 = this.items;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        item = _ref1[_i];
        _results.push(this.hydrate(item));
      }
      return _results;
    };

    return Model;

  })(retool.Class);

  if (typeof _ !== 'undefined') {
    underscore_array_methods = ['first', 'initial', 'last', 'rest', 'compact', 'flatten', 'without', 'union', 'intersection', 'difference', 'uniq', 'zip', 'object', 'indexOf', 'lastIndexOf', 'sortedIndex', 'range'];
    underscore_collection_methods = ['each', 'map', 'reduce', 'reduceRight', 'find', 'filter', 'where', 'findWhere', 'reject', 'every', 'some', 'invoke', 'pluck', 'max', 'min', 'sortBy', 'groupBy', 'countBy', 'shuffle', 'toArray', 'size'];
    _ref1 = underscore_array_methods.concat(underscore_collection_methods);
    _fn = function(method) {
      return namespace.Model[method] = function() {
        return _[method].apply(_, [this.items].concat(_.toArray(arguments)));
      };
    };
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      method = _ref1[_i];
      _fn(method);
    }
  }

  ajax_reporter = function(result) {
    if (result.success === false) {
      return console.error(result.message || "unspecified error");
    }
  };

  namespace.AjaxModel = (function(_super) {
    __extends(AjaxModel, _super);

    function AjaxModel() {
      _ref2 = AjaxModel.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    AjaxModel.save = function(obj, overwrite) {
      if (overwrite == null) {
        overwrite = false;
      }
      obj = AjaxModel.__super__.constructor.save.apply(this, arguments);
      $.post("/data/" + this.slug + "/" + obj.get_id(), {
        data: JSON.stringify(obj)
      }, ajax_reporter);
      return obj;
    };

    AjaxModel.del = function(id) {
      id = AjaxModel.__super__.constructor.del.apply(this, arguments);
      return $.get("/data/" + this.slug + "/" + id + "/del", ajax_reporter);
    };

    AjaxModel.load = function(done) {
      var _this = this;
      if (remodel.warmup[this.slug]) {
        return AjaxModel.__super__.constructor.load.call(this, remodel.warmup[this.slug]);
      } else {
        return $.get("/data/" + this.slug, function(results) {
          ajax_reporter(results);
          return AjaxModel.__super__.constructor.load.call(_this, results);
        });
      }
    };

    return AjaxModel;

  })(namespace.Model);

  namespace.LocalStorageModel = (function(_super) {
    __extends(LocalStorageModel, _super);

    function LocalStorageModel() {
      _ref3 = LocalStorageModel.__super__.constructor.apply(this, arguments);
      return _ref3;
    }

    LocalStorageModel.save = function(obj, overwrite) {
      if (overwrite == null) {
        overwrite = false;
      }
      LocalStorageModel.__super__.constructor.save.apply(this, arguments);
      return localStorage[this.slug] = JSON.stringify(this.items);
    };

    LocalStorageModel.del = function(id) {
      LocalStorageModel.__super__.constructor.del.apply(this, arguments);
      return localStorage[this.slug] = JSON.stringify(this.items);
    };

    LocalStorageModel.load = function() {
      var items;
      items = JSON.parse(localStorage[this.slug] || '[]');
      return LocalStorageModel.__super__.constructor.load.call(this, this.items);
    };

    return LocalStorageModel;

  })(namespace.Model);

}).call(this);
